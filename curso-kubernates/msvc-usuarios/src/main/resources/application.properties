#Todas estas configuraciones para diferentes ambientes (prueba, desarrollo) se pueden establecer con Docker y Kubernates. Por ahora se dejarán acá para trabajar en local.
#nombre de la aplicacion
spring.application.name=msvc-usuarios
#esto quiere decir que si no hay un puerto asignado en las variables de entorno (en el dockerfile por ejemplo, se conectará al puerto 8001
server.port=${PORT:8001}
#server.port=8001
#conección a base de datos local desde maquina local
#spring.datasource.url=jdbc:mysql://localhost:3306/msvc_usuarios
#conección a base de datos local para que al ejecutarse un container docker encuentre la bbdd local
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/msvc_usuarios
#conección a base de datos local ejecutandose en contenedor docker para que al ejecutarse un container docker encuentre la bbdd local. contandy es nombre del contenedor donde esta la bbdd
#spring.datasource.url=jdbc:mysql://mysql8:3306/msvc_usuarios
#dejando la coneccion a base de datos flexibilizada para que pueda ser seteada en Dockerfile o por comandos al generar imagen con docker build
spring.datasource.url=jdbc:mysql://${DB_HOST:mysql8:3306}/${DB_DATABASE:msvc_usuarios}
#spring.datasource.username=root
#dejando username flexibilizada para que pueda ser seteada en Dockerfile o por comandos
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:password}
#driver mysql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#dialecto de mysql. Existen un dialecto para mysql que es diferente al de Oracle, Posgress, etc. Son pequeñas variaciones en la sintaxis SQL
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#para generar nosotros mismos las tablas al correr la aplicacion. Por defecto es false, o sea las tablas ya estan creadas por defecto en la bbdd. La BBDD eso si debe estar creada previamente
spring.jpa.generate-ddl=true
#para mostrar en el log las consultas SQL
logging.level.org.hibernate.SQL=debug
#guardar logs en carpeta docker /app/logs
logging.file.path=/app/logs
#para prescindir de hardcorear configuraciones para conectar ambos microservicios en cliente rest (clase CursoClienteRest)
msvc.cursos.url=${CURSOS_URL:msvc-cursos:8002}
