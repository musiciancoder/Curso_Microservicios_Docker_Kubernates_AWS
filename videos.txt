1) Crear proyecto modular, es decir con proyecto hijo (msvc-usuarios) y proyecto padre (curso-kubernates)
2) Configurar el contexto de persistencia en el hijo
*Configuró application.properties
*Creo clase entity (pojo) Usuario
3)Crear patrón DAO segun arquitectura spring ("Implementando el componente service") (siempre en el hijo, por ahora nunca en el padre)
*Creó Interfaz UsuarioService
*Creó clase UsuarioServiceImpl que implementa interfaz anterior
*Creó el controlador inyectando el servicio ("Implementando el controlador RestController")
*Creó UsuarioController
*Implementó metodos handler GET, POST PUT y DELETE
4)Configurar aplication.properties con bbdd mysql("Configurando en el application.properties conexión MySQL")
5) Correr la aplicacion, verificar que se hayan creado las tablas en la BBDD de mysql (previamente crear la bbdd manualmente en phpmyadmin sin tablas) y probar en postman
6) Crear segundo proyecto hijo (msvc-cursos) 
*Configuró application.properties
*Creo clase entity (pojo) Usuario
7)Crear patrón DAO segun arquitectura spring  (ahora en el segundo hijo, por ahora nunca en el padre)
*Creó Interfaz CursoService
*Creó clase servicio CursoServiceImpl
*Creó controlador
8)Configurar aplication.properties con bbdd postgress
9)Crear la bbdd en postgres y probar con postman
10)Validar los campos que se probaron en postman con @NotBlank en la entidad y con @Value y Binding result en el controlador
11)Validar que el email de un usuario nuevo no exista en la bbdd
12)Conectar los microservicios
*Creó la clase CursoUsuario para unir ambos servicios por usuarioId y para que se generara esta tabla en la bbdd
*Creó la clase Usuario, que no es una entidad, sino que sirve de clase para cuando recibimos json de usuario desde el otro servicio
*Modificó la clase curso, para que contuviera una llave foránea "curso_id". Además creó los métodos que agregan y eliminan usuarios del curso
*Modificó la interfaz de servicio CursoService para que tuvieran los metodos para asignar o desasignar usuarios a los cursos
*Creó el cliente http con feign UsuarioClientRest y declaró los métodos del controlador del otro servicio
*En la clase de servicio CursoServiceImpl sobrescribió los métodos de la interfaz de servicio ocupando los métodos declarados en UsuarioClientRest dentro de ellos
*En el controlador CursoController inyectó el servicio y ocupó los métodos de este en cada llamada para asignar, crear y eliminar usuario del curso.
*Hizo correr ambos servicios y probó en postman
*Solo en msvc-usuario creó toda la lógica de negocios (en UsuarioService, UsuarioServiceImpl y UsuarioController) para obtener el detalle de varios usuarios simultaneamente mediante los ids de usuarios (request "usuarios por curso en el postman") y probó en postman
*En el cliente rest de msvc-curso creó el método en concordancia con el controlador de msvc-usuario, implementó el método en el servicio CursoServiceImpl y lo ocupó en el get del controlador CursoController. Probó en Postman.


