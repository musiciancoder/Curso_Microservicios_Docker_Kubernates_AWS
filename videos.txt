1) Crear proyecto modular, es decir con proyecto hijo (msvc-usuarios) y proyecto padre (curso-kubernates)
2) Configurar el contexto de persistencia en el hijo
*Configuró application.properties
*Creo clase entity (pojo) Usuario
3)Crear patrón DAO segun arquitectura spring ("Implementando el componente service") (siempre en el hijo, por ahora nunca en el padre)
*Creó Interfaz UsuarioService
*Creó clase UsuarioServiceImpl que implementa interfaz anterior
*Creó el controlador inyectando el servicio ("Implementando el controlador RestController")
*Creó UsuarioController
*Implementó metodos handler GET, POST PUT y DELETE
4)Configurar aplication.properties con bbdd mysql("Configurando en el application.properties conexión MySQL")
5) Correr la aplicacion, verificar que se hayan creado las tablas en la BBDD de mysql (previamente crear la bbdd manualmente en phpmyadmin sin tablas) y probar en postman
6) Crear segundo proyecto hijo (msvc-cursos) 
*Configuró application.properties
*Creo clase entity (pojo) Usuario
7)Crear patrón DAO segun arquitectura spring  (ahora en el segundo hijo, por ahora nunca en el padre)
*Creó Interfaz CursoService
*Creó clase servicio CursoServiceImpl
*Creó controlador
8)Configurar aplication.properties con bbdd postgress
9)Crear la bbdd en postgres y probar con postman
10)Validar los campos que se probaron en postman con @NotBlank en la entidad y con @Value y Binding result en el controlador
11)Validar que el email de un usuario nuevo no exista en la bbdd

